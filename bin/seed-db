#!/usr/bin/env node
'use strict';

var rsvp = require('rsvp');
var monky = require('../test/server/support/factories');
var mongoose = require('mongoose');
var config = require('../server/lib/config');
var models = require('../server/models');
var DB = config.get('db');

function connect () {
  return new rsvp.Promise(function (resolve) {
    if (mongoose.connection.db) {
      console.log('Seed: Database already connected');
      return resolve();
    }

    mongoose.connect(DB);

    mongoose.connection.on('open', function () {
      console.log('connected');
      resolve();
    });

    mongoose.connection.on('error', function (err) {
      console.log('mongo error', err);
      console.log(err.stack);
    });
  });
}

function close () {
  if (mongoose.connection.db) {
    mongoose.connection.close();
  }
}

function populate () {
  return connect()
  .then(function () {
    return models.user.remove({})
    .then(function () {
      return models.til.remove({});
    });
  })
  .then(function createUsers() {
    console.log('Creating users');
    return rsvp.all([
      monky.create('user:marty'),
      monky.create('user:docbrown'),
    ]);
  })
  .then(function createTils (users) {
    var marty = users[0];
    var doc = users[1];

    return rsvp.all([
      monky.createList('comment', 3, {userId: users[0]._id}),
      monky.createList('comment', 3, {userId: users[1]._id}),
    ])
      .then(function (comments) {
        var martyComments = comments[0];
        var docComments = comments[1];

        return rsvp.all([
          monky.createList('til', 5),
          monky.createList('til', 2, {user: marty._id , comments: docComments}),
          monky.createList('til', 2, {user: doc._id , comments: martyComments})
        ]);
      });
  })
  .catch(function (err) {
    console.log('seed err', err);
    console.log(err.stack);
  });
}

if (require.main === module) {
  populate()
    .then(function () {
      console.log('Succesfully Populated database');
    })
    .finally(close);
}

module.exports = {
  populate: populate,
  close: close
};
